diff --git a/LICENCE b/LICENCE
new file mode 100644
index 0000000..b5afdd9
--- /dev/null
+++ b/LICENCE
@@ -0,0 +1,23 @@
+# Copied from https://github.com/wandb/wandb/blob/7a7dd30e94e3c27e0af9058248320fe30967157e/LICENSE
+
+MIT License
+
+Copyright (c) 2021 Weights and Biases, Inc.
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
\ No newline at end of file
diff --git a/README.md b/README.md
index 93cc13f..66097da 100644
--- a/README.md
+++ b/README.md
@@ -1,92 +1,18 @@
 # litte_wandb
 
-Extracts the automatic logging part from the weights and biases library.
+Extracts the [automatic logging](https://docs.wandb.ai/guides/track/log#automatically-logged-data) part from the weights and biases library.
 
-## Getting started
+## Desired output
 
-To make it easy for you to get started with GitLab, here's a list of recommended next steps.
+- system info
+- pip- or conda-environment
+- git repo including patches
+- stdin, stdout, stderr ?!
+- system metrics (?) This is not a snapshot, but rather 
 
-Already a pro? Just edit this README.md and make it your own. Want to make it easy? [Use the template at the bottom](#editing-this-readme)!
+## Relevant code
 
-## Add your files
-
-- [ ] [Create](https://docs.gitlab.com/ee/user/project/repository/web_editor.html#create-a-file) or [upload](https://docs.gitlab.com/ee/user/project/repository/web_editor.html#upload-a-file) files
-- [ ] [Add files using the command line](https://docs.gitlab.com/ee/gitlab-basics/add-file.html#add-a-file-using-the-command-line) or push an existing Git repository with the following command:
-
-```
-cd existing_repo
-git remote add origin https://gitlab.img.astrazeneca.net/RA/experimental/litte_wandb.git
-git branch -M master
-git push -uf origin master
-```
-
-## Integrate with your tools
-
-- [ ] [Set up project integrations](https://gitlab.img.astrazeneca.net/RA/experimental/litte_wandb/-/settings/integrations)
-
-## Collaborate with your team
-
-- [ ] [Invite team members and collaborators](https://docs.gitlab.com/ee/user/project/members/)
-- [ ] [Create a new merge request](https://docs.gitlab.com/ee/user/project/merge_requests/creating_merge_requests.html)
-- [ ] [Automatically close issues from merge requests](https://docs.gitlab.com/ee/user/project/issues/managing_issues.html#closing-issues-automatically)
-- [ ] [Enable merge request approvals](https://docs.gitlab.com/ee/user/project/merge_requests/approvals/)
-- [ ] [Automatically merge when pipeline succeeds](https://docs.gitlab.com/ee/user/project/merge_requests/merge_when_pipeline_succeeds.html)
-
-## Test and Deploy
-
-Use the built-in continuous integration in GitLab.
-
-- [ ] [Get started with GitLab CI/CD](https://docs.gitlab.com/ee/ci/quick_start/index.html)
-- [ ] [Analyze your code for known vulnerabilities with Static Application Security Testing(SAST)](https://docs.gitlab.com/ee/user/application_security/sast/)
-- [ ] [Deploy to Kubernetes, Amazon EC2, or Amazon ECS using Auto Deploy](https://docs.gitlab.com/ee/topics/autodevops/requirements.html)
-- [ ] [Use pull-based deployments for improved Kubernetes management](https://docs.gitlab.com/ee/user/clusters/agent/)
-- [ ] [Set up protected environments](https://docs.gitlab.com/ee/ci/environments/protected_environments.html)
-
-***
-
-# Editing this README
-
-When you're ready to make this README your own, just edit this file and use the handy template below (or feel free to structure it however you want - this is just a starting point!). Thank you to [makeareadme.com](https://www.makeareadme.com/) for this template.
-
-## Suggestions for a good README
-Every project is different, so consider which of these sections apply to yours. The sections used in the template are suggestions for most open source projects. Also keep in mind that while a README can be too long and detailed, too long is better than too short. If you think your README is too long, consider utilizing another form of documentation rather than cutting out information.
-
-## Name
-Choose a self-explaining name for your project.
-
-## Description
-Let people know what your project can do specifically. Provide context and add a link to any reference visitors might be unfamiliar with. A list of Features or a Background subsection can also be added here. If there are alternatives to your project, this is a good place to list differentiating factors.
-
-## Badges
-On some READMEs, you may see small images that convey metadata, such as whether or not all the tests are passing for the project. You can use Shields to add some to your README. Many services also have instructions for adding a badge.
-
-## Visuals
-Depending on what you are making, it can be a good idea to include screenshots or even a video (you'll frequently see GIFs rather than actual videos). Tools like ttygif can help, but check out Asciinema for a more sophisticated method.
-
-## Installation
-Within a particular ecosystem, there may be a common way of installing things, such as using Yarn, NuGet, or Homebrew. However, consider the possibility that whoever is reading your README is a novice and would like more guidance. Listing specific steps helps remove ambiguity and gets people to using your project as quickly as possible. If it only runs in a specific context like a particular programming language version or operating system or has dependencies that have to be installed manually, also add a Requirements subsection.
-
-## Usage
-Use examples liberally, and show the expected output if you can. It's helpful to have inline the smallest example of usage that you can demonstrate, while providing links to more sophisticated examples if they are too long to reasonably include in the README.
-
-## Support
-Tell people where they can go to for help. It can be any combination of an issue tracker, a chat room, an email address, etc.
-
-## Roadmap
-If you have ideas for releases in the future, it is a good idea to list them in the README.
-
-## Contributing
-State if you are open to contributions and what your requirements are for accepting them.
-
-For people who want to make changes to your project, it's helpful to have some documentation on how to get started. Perhaps there is a script that they should run or some environment variables that they need to set. Make these steps explicit. These instructions could also be useful to your future self.
-
-You can also document commands to lint the code or run tests. These steps help to ensure high code quality and reduce the likelihood that the changes inadvertently break something. Having instructions for running tests is especially helpful if it requires external setup, such as starting a Selenium server for testing in a browser.
-
-## Authors and acknowledgment
-Show your appreciation to those who have contributed to the project.
-
-## License
-For open source projects, say how it is licensed.
-
-## Project status
-If you have run out of energy or time for your project, put a note at the top of the README saying that development has slowed down or stopped completely. Someone may choose to fork your project or volunteer to step in as a maintainer or owner, allowing your project to keep going. You can also make an explicit request for maintainers.
+- https://github.com/wandb/wandb/blob/7a7dd30e94e3c27e0af9058248320fe30967157e/wandb/sdk/internal/system/system_info.py#L82
+  -  this one file does everything!
+- https://github.com/wandb/wandb/blob/7a7dd30e94e3c27e0af9058248320fe30967157e/wandb/sdk/wandb_init.py#L719
+- https://github.com/wandb/wandb/blob/7a7dd30e94e3c27e0af9058248320fe30967157e/wandb/sdk/wandb_run.py#L514
diff --git a/little_wandb/system_info.py b/little_wandb/system_info.py
new file mode 100644
index 0000000..a7ef2f5
--- /dev/null
+++ b/little_wandb/system_info.py
@@ -0,0 +1,268 @@
+# Information about the system and the environment
+import datetime
+import glob
+import json
+import logging
+import os
+import subprocess
+import sys
+from shutil import copyfile
+from typing import Any, Dict, List, Optional
+from urllib.parse import unquote
+
+from wandb.sdk.internal.settings_static import SettingsStatic
+from wandb.sdk.lib import filesystem
+from wandb.sdk.lib.filenames import (
+    CONDA_ENVIRONMENTS_FNAME,
+    DIFF_FNAME,
+    METADATA_FNAME,
+    REQUIREMENTS_FNAME,
+)
+from wandb.sdk.lib.git import GitRepo
+
+from wandb.sdk.internal.system.assets.interfaces import Interface
+
+logger = logging.getLogger(__name__)
+
+
+class SystemInfo:
+    # todo: this is mostly a copy of the legacy Meta class, but it should be refactored
+    def __init__(self, settings: SettingsStatic, interface: Interface) -> None:
+        logger.debug("System info init")
+        self.settings = settings
+
+        self.metadata_file_name = os.path.join(self.settings.files_dir, METADATA_FNAME)
+        self.backend_interface = interface
+        self.git = GitRepo(
+            root=self.settings.git_root,
+            remote=self.settings.git_remote,  # type: ignore
+            remote_url=self.settings.git_remote_url,
+            commit=self.settings.git_commit,
+        )
+        # Location under "code" directory in files where program was saved.
+        self.saved_program: Optional[os.PathLike] = None
+        # Locations under files directory where diff patches were saved.
+        self.saved_patches: List[str] = []
+        logger.debug("System info init done")
+
+    # todo: refactor these _save_* methods
+    def _save_pip(self) -> None:
+        """Save the current working set of pip packages to {REQUIREMENTS_FNAME}."""
+        logger.debug(
+            "Saving list of pip packages installed into the current environment"
+        )
+        try:
+            import pkg_resources
+
+            installed_packages = [d for d in iter(pkg_resources.working_set)]
+            installed_packages_list = sorted(
+                f"{i.key}=={i.version}" for i in installed_packages
+            )
+            with open(
+                os.path.join(self.settings.files_dir, REQUIREMENTS_FNAME), "w"
+            ) as f:
+                f.write("\n".join(installed_packages_list))
+        except Exception as e:
+            logger.exception(f"Error saving pip packages: {e}")
+        logger.debug("Saving pip packages done")
+
+    def _save_conda(self) -> None:
+        current_shell_is_conda = os.path.exists(os.path.join(sys.prefix, "conda-meta"))
+        if not current_shell_is_conda:
+            return None
+
+        logger.debug(
+            "Saving list of conda packages installed into the current environment"
+        )
+        try:
+            with open(
+                os.path.join(self.settings.files_dir, CONDA_ENVIRONMENTS_FNAME), "w"
+            ) as f:
+                subprocess.call(
+                    ["conda", "env", "export"], stdout=f, stderr=subprocess.DEVNULL
+                )
+        except Exception as e:
+            logger.exception(f"Error saving conda packages: {e}")
+        logger.debug("Saving conda packages done")
+
+    def _save_code(self) -> None:
+        logger.debug("Saving code")
+        if self.settings.program_relpath is None:
+            logger.warning("unable to save code -- program entry not found")
+            return None
+
+        root: str = self.git.root or os.getcwd()
+        program_relative: str = self.settings.program_relpath
+        filesystem.mkdir_exists_ok(
+            os.path.join(
+                self.settings.files_dir, "code", os.path.dirname(program_relative)
+            )
+        )
+        program_absolute = os.path.join(root, program_relative)
+        if not os.path.exists(program_absolute):
+            logger.warning("unable to save code -- can't find %s" % program_absolute)
+            return None
+        saved_program = os.path.join(self.settings.files_dir, "code", program_relative)
+        self.saved_program = program_relative  # type: ignore
+
+        if not os.path.exists(saved_program):
+            copyfile(program_absolute, saved_program)
+        logger.debug("Saving code done")
+
+    def _save_patches(self) -> None:
+        """Save the current state of this repository to one or more patches.
+
+        Makes one patch against HEAD and another one against the most recent
+        commit that occurs in an upstream branch. This way we can be robust
+        to history editing as long as the user never does "push -f" to break
+        history on an upstream branch.
+
+        Writes the first patch to <files_dir>/<DIFF_FNAME> and the second to
+        <files_dir>/upstream_diff_<commit_id>.patch.
+
+        """
+        if not self.git.enabled:
+            return None
+
+        logger.debug("Saving git patches")
+        try:
+            root = self.git.root
+            diff_args = ["git", "diff"]
+            if self.git.has_submodule_diff:
+                diff_args.append("--submodule=diff")
+
+            if self.git.dirty:
+                patch_path = os.path.join(self.settings.files_dir, DIFF_FNAME)
+                with open(patch_path, "wb") as patch:
+                    # we diff against HEAD to ensure we get changes in the index
+                    subprocess.check_call(
+                        diff_args + ["HEAD"], stdout=patch, cwd=root, timeout=5
+                    )
+                    self.saved_patches.append(
+                        os.path.relpath(patch_path, start=self.settings.files_dir)
+                    )
+
+            upstream_commit = self.git.get_upstream_fork_point()  # type: ignore
+            if upstream_commit and upstream_commit != self.git.repo.head.commit:
+                sha = upstream_commit.hexsha
+                upstream_patch_path = os.path.join(
+                    self.settings.files_dir, f"upstream_diff_{sha}.patch"
+                )
+                with open(upstream_patch_path, "wb") as upstream_patch:
+                    subprocess.check_call(
+                        diff_args + [sha], stdout=upstream_patch, cwd=root, timeout=5
+                    )
+                    self.saved_patches.append(
+                        os.path.relpath(
+                            upstream_patch_path, start=self.settings.files_dir
+                        )
+                    )
+        # TODO: A customer saw `ValueError: Reference at 'refs/remotes/origin/foo'
+        #  does not exist` so we now catch ValueError. Catching this error feels
+        #  too generic.
+        except (
+            ValueError,
+            subprocess.CalledProcessError,
+            subprocess.TimeoutExpired,
+        ) as e:
+            logger.error("Error generating diff: %s" % e)
+        logger.debug("Saving git patches done")
+
+    def _probe_git(self, data: Dict[str, Any]) -> Dict[str, Any]:
+        if self.settings.disable_git:
+            return data
+
+        # in case of manually passing the git repo info, `enabled` would be False,
+        # but we still want to save the git repo info
+        if not self.git.enabled and self.git.auto:
+            return data
+
+        logger.debug("Probing git")
+
+        data["git"] = {
+            "remote": self.git.remote_url,
+            "commit": self.git.last_commit,
+        }
+        data["email"] = self.git.email
+        data["root"] = self.git.root or data.get("root") or os.getcwd()
+        logger.debug("Probing git done")
+
+        return data
+
+    def probe(self) -> Dict[str, Any]:
+        """Probe the system for information about the current environment."""
+        # todo: refactor this quality code 🤮🤮🤮🤮🤮
+        logger.debug("Probing system")
+        data: Dict[str, Any] = dict()
+
+        data["os"] = self.settings._os
+        data["python"] = self.settings._python
+        data["heartbeatAt"] = datetime.datetime.utcnow().isoformat()
+        data["startedAt"] = datetime.datetime.utcfromtimestamp(
+            self.settings._start_time
+        ).isoformat()
+
+        data["docker"] = self.settings.docker
+
+        data["cuda"] = self.settings._cuda
+        data["args"] = self.settings._args
+        data["state"] = "running"
+
+        if self.settings.program is not None:
+            data["program"] = self.settings.program
+        if not self.settings.disable_code:
+            if self.settings.program_relpath is not None:
+                data["codePath"] = self.settings.program_relpath
+            elif self.settings._jupyter:
+                if self.settings.notebook_name:
+                    data["program"] = self.settings.notebook_name
+                elif self.settings._jupyter_path:
+                    if self.settings._jupyter_path.startswith("fileId="):
+                        unescaped = unquote(self.settings._jupyter_path)
+                        data["colab"] = (
+                            "https://colab.research.google.com/notebook#" + unescaped
+                        )
+                        data["program"] = self.settings._jupyter_name
+                    else:
+                        data["program"] = self.settings._jupyter_path
+                        data["root"] = self.settings._jupyter_root
+            # get the git repo info
+            data = self._probe_git(data)
+
+        if self.settings.anonymous != "true":
+            data["host"] = self.settings.host
+            data["username"] = self.settings.username
+            data["executable"] = sys.executable
+        else:
+            data.pop("email", None)
+            data.pop("root", None)
+
+        logger.debug("Probing system done")
+
+        return data
+
+    def publish(self, system_info: dict) -> None:
+        # save pip, conda, code patches to disk
+        if self.settings._save_requirements:
+            self._save_pip()
+            self._save_conda()
+        if self.settings.save_code:
+            self._save_code()
+            self._save_patches()
+
+        # save system_info to disk
+        with open(self.metadata_file_name, "w") as f:
+            s = json.dumps(system_info, indent=4)
+            f.write(s)
+            f.write("\n")
+        base_name = os.path.basename(self.metadata_file_name)
+        files = dict(files=[(base_name, "now")])
+
+        if self.saved_program:
+            saved_program = os.path.join("code", self.saved_program)
+            files["files"].append((glob.escape(saved_program), "now"))
+        for patch in self.saved_patches:
+            files["files"].append((glob.escape(patch), "now"))
+
+        # publish files to the backend
+        self.backend_interface.publish_files(files)  # type: ignore
